{"ast":null,"code":"import _objectSpread from \"/home/akhil/Documents/tetris-reactjs/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akhil/Documents/tetris-reactjs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const rotate = (matrix, dir) => {\n    //make the rows to become columns i.e, transpose \n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse each row to get a rotated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/home/akhil/Documents/tetris-reactjs/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","checkCollision","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","updatePlayerPos","prev","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,gBAA5C;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACDN,QAAQ,CAAC;AACnCO,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CADP;AAAA;AAAA,QACtBC,MADsB;AAAA,QACdC,SADc;;AAO7B,QAAMC,eAAe,GAAG,CAAC;AAAEP,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CE,IAAAA,SAAS,CAACE,IAAI,sBACTA,IADS;AAEZT,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGQ,IAAI,CAACT,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGO,IAAI,CAACT,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFO;AAGZG,MAAAA;AAHY,MAAL,CAAT;AAKD,GAND;;AAOA,QAAMK,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC9B;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CACnB,CAACC,CAAD,EAAIC,KAAJ,KAAcL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CADK,CAArB,CAF8B,CAK9B;;AACA,QAAIJ,GAAG,GAAG,CAAV,EAAa,OAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAIA,GAAG,CAACC,OAAJ,EAAxB,CAAP;AACb,WAAON,YAAY,CAACM,OAAb,EAAP;AACD,GARD;;AAUA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB;AACnC,UAAMU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAenB,MAAf,CAAX,CAArB;AACAgB,IAAAA,YAAY,CAACnB,SAAb,GAAyBO,MAAM,CAACY,YAAY,CAACnB,SAAd,CAA/B;AAEA,UAAMH,GAAG,GAAGsB,YAAY,CAACtB,GAAb,CAAiBC,CAA7B;AACA,QAAIyB,MAAM,GAAG,CAAb;;AACA,WAAM7B,cAAc,CAACyB,YAAD,EAAeD,KAAf,EAAqB;AAACpB,MAAAA,CAAC,EAAC,CAAH;AAAKC,MAAAA,CAAC,EAAC;AAAP,KAArB,CAApB,EAAoD;AAClDoB,MAAAA,YAAY,CAACtB,GAAb,CAAiBC,CAAjB,IAAsByB,MAAtB;AAGD;;AAEDnB,IAAAA,SAAS,CAACe,YAAD,CAAT;AAED,GAdD;;AAgBA,QAAMK,WAAW,GAAGjC,WAAW,CAAC,MAAM;AACpCa,IAAAA,SAAS,CAAC;AACRP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEH,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BI,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACC,MAAD,EAASE,eAAT,EAA0BmB,WAA1B,EAAuCP,YAAvC,CAAP;AACD,CAjDM","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }))\n  }\n  const rotate = (matrix, dir) => {\n    //make the rows to become columns i.e, transpose \n    const rotatedTetro = matrix.map(\n      (_, index) => matrix.map(col => col[index]),\n    );\n    //reverse each row to get a rotated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  }\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player))\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino)\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while(checkCollision(clonedPlayer, stage,{x:0,y:0})){\n      clonedPlayer.pos.x += offset;\n      \n\n    }\n\n    setPlayer(clonedPlayer)\n\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    })\n  }, [])\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n}"]},"metadata":{},"sourceType":"module"}