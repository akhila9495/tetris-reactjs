{"ast":null,"code":"import _objectSpread from \"/home/akhil/Documents/tetris-reactjs/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/akhil/Documents/tetris-reactjs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\nexport const usePlayer = () => {\n  const _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => _objectSpread({}, prev, {\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const rotate = (matrix, dir) => {\n    //make the rows to become columns i.e, transpose \n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index])); //reverse each row to get a rotated matrix\n\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(Json.stringify(player));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};","map":{"version":3,"sources":["/home/akhil/Documents/tetris-reactjs/src/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","usePlayer","pos","x","y","tetromino","shape","collided","player","setPlayer","updatePlayerPos","prev","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","Json","stringify","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,eAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACDL,QAAQ,CAAC;AACnCM,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAEP,UAAU,CAAC,CAAD,CAAV,CAAcQ,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CADP;AAAA;AAAA,QACtBC,MADsB;AAAA,QACdC,SADc;;AAO7B,QAAMC,eAAe,GAAG,CAAC;AAAEP,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CE,IAAAA,SAAS,CAACE,IAAI,sBACTA,IADS;AAEZT,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGQ,IAAI,CAACT,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGO,IAAI,CAACT,GAAL,CAASE,CAAT,IAAcA;AAA1C,OAFO;AAGZG,MAAAA;AAHY,MAAL,CAAT;AAKD,GAND;;AAOA,QAAMK,MAAM,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC9B;AACA,UAAMC,YAAY,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACC,CAAD,EAAIC,KAAJ,KAAcL,MAAM,CAACG,GAAP,CAAWG,GAAG,IAAIA,GAAG,CAACD,KAAD,CAArB,CAAzB,CAArB,CAF8B,CAG9B;;AACA,QAAGJ,GAAG,GAAE,CAAR,EAAW,OAAOC,YAAY,CAACC,GAAb,CAAiBI,GAAG,IAAEA,GAAG,CAACC,OAAJ,EAAtB,CAAP;AAIZ,GARD;;AAUF,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQT,GAAR,KAAgB;AACnC,UAAMU,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAX,CAArB;AAED,GAHD;;AAKA,QAAMqB,WAAW,GAAGhC,WAAW,CAAC,MAAM;AACpCY,IAAAA,SAAS,CAAC;AACRP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAEH,WAAW,GAAG,CAAd,GAAkB,CAAvB;AAA0BI,QAAAA,CAAC,EAAE;AAA7B,OADG;AAERC,MAAAA,SAAS,EAAEN,eAAe,GAAGO,KAFrB;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAAD,CAAT;AAKD,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACC,MAAD,EAASE,eAAT,EAA0BmB,WAA1B,CAAP;AACC,CAtCM","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }))\n  }\n  const rotate = (matrix, dir) => {\n    //make the rows to become columns i.e, transpose \n    const rotatedTetro = matrix.map((_, index) => matrix.map(col => col[index]));\n    //reverse each row to get a rotated matrix\n    if(dir >0) return rotatedTetro.map(row=>row.reverse());\n\n\n\n  }\n\nconst playerRotate = (stage, dir) => {\n  const clonedPlayer = JSON.parse(Json.stringify(player))\n\n}\n\nconst resetPlayer = useCallback(() => {\n  setPlayer({\n    pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n    tetromino: randomTetromino().shape,\n    collided: false,\n  })\n}, [])\n\nreturn [player, updatePlayerPos, resetPlayer];\n}"]},"metadata":{},"sourceType":"module"}