{"ast":null,"code":"import _slicedToArray from \"/home/akhil/Documents/tetris-reactjs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/akhil/Documents/tetris-reactjs/src/components/Tetris.js\";\nimport React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers'; // Styled Components\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; // Custom Hooks\n\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useInterval } from '../hooks/useInterval';\nimport { useGameStatus } from '../hooks/useGameStatus'; // Components\n\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropTime = _useState2[0],\n        setDropTime = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const _usePlayer = usePlayer(),\n        _usePlayer2 = _slicedToArray(_usePlayer, 4),\n        player = _usePlayer2[0],\n        updatePlayerPos = _usePlayer2[1],\n        resetPlayer = _usePlayer2[2],\n        playerRotate = _usePlayer2[3];\n\n  const _useStage = useStage(player, resetPlayer),\n        _useStage2 = _slicedToArray(_useStage, 3),\n        stage = _useStage2[0],\n        setStage = _useStage2[1],\n        rowsCleared = _useStage2[2];\n\n  const _useGameStatus = useGameStatus(rowsCleared),\n        _useGameStatus2 = _slicedToArray(_useGameStatus, 6),\n        score = _useGameStatus2[0],\n        setScore = _useGameStatus2[1],\n        rows = _useGameStatus2[2],\n        setRows = _useGameStatus2[3],\n        level = _useGameStatus2[4],\n        setLevel = _useGameStatus2[5];\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (rows > level + 1 + 10) {\n      setLevel(prev => prev + 1);\n      setDropTime(1000 / (level + 1) + 100);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      // Game Over\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER!!!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return React.createElement(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: e => keyUp(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(StyledTetris, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Stage, {\n    stage: stage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, gameOver ? React.createElement(Display, {\n    gameOver: gameOver,\n    text: \"Game Over\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: \"Score\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Rows\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: \"Level\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(StartButton, {\n    callback: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/home/akhil/Documents/tetris-reactjs/src/components/Tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","usePlayer","useStage","useInterval","useGameStatus","Stage","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","dir","x","y","startGame","drop","prev","collided","pos","console","log","keyUp","keyCode","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hooks\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useInterval } from '../hooks/useInterval';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  }\n\n  const startGame = () => {\n    \n    // Reset everything\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  }\n\n  const drop = () => {\n    if (rows > (level + 1)+10){\n      setLevel(prev => prev+1);\n      setDropTime(1000/(level+1)+100);\n\n    }\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false })\n    } else {\n      // Game Over\n      if (player.pos.y < 1) {\n        console.log(\"GAME OVER!!!\");\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  }\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(1000);\n\n      }\n    }\n\n  }\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  }\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  }\n  useInterval(() => {\n    drop();\n  }, dropTime)\n\n  return (\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={e => keyUp(e)}>\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text=\"Score\" />\n              <Display text=\"Rows\" />\n              <Display text=\"Level\" />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n"]},"metadata":{},"sourceType":"module"}