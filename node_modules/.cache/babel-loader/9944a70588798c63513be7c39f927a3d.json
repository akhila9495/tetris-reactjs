{"ast":null,"code":"import _slicedToArray from \"/home/akhil/Documents/tetris-reactjs/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const _useState = useState(createStage()),\n        _useState2 = _slicedToArray(_useState, 2),\n        stage = _useState2[0],\n        setStage = _useState2[1];\n\n  const _useStage = useStage(0),\n        _useStage2 = _slicedToArray(_useStage, 2),\n        rowsClear = _useStage2[0],\n        setRowsCleared = _useStage2[1];\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce;\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then draw the tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, \"\".concat(player.collided ? 'merged' : 'clear')];\n          }\n        });\n      }); // Then check if we collided\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};","map":{"version":3,"sources":["/home/akhil/Documents/tetris-reactjs/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsClear","setRowsCleared","sweepRows","newStage","reduce","updateStage","prevStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA,oBACrBL,QAAQ,CAACE,WAAW,EAAZ,CADa;AAAA;AAAA,QACxCI,KADwC;AAAA,QACjCC,QADiC;;AAAA,oBAEdJ,QAAQ,CAAC,CAAD,CAFM;AAAA;AAAA,QAExCK,SAFwC;AAAA,QAE9BC,cAF8B;;AAI/CR,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEJ,UAAMC,SAAS,GAAEC,QAAQ,IAAEA,QAAQ,CAACC,MAApC;;AAEI,UAAMC,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMH,QAAQ,GAAGG,SAAS,CAACC,GAAV,CAAcC,GAAG,IAChCA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAF+B,CAM/B;;AACAb,MAAAA,MAAM,CAACc,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACnCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACfV,YAAAA,QAAQ,CAACS,CAAC,GAAGhB,MAAM,CAACmB,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGlB,MAAM,CAACmB,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,YAE1CjB,MAAM,CAACoB,QAAP,GAAkB,QAAlB,GAA6B,OAFa,EAA/C;AAID;AACF,SAPD;AAQD,OATD,EAP+B,CAiB/B;;AACA,UAAIpB,MAAM,CAACoB,QAAX,EAAqB;AACnBnB,QAAAA,WAAW;AACZ;;AAED,aAAOM,QAAP;AACD,KAvBD;;AAyBAJ,IAAAA,QAAQ,CAACkB,IAAI,IAAIZ,WAAW,CAACY,IAAD,CAApB,CAAR;AACD,GA/BQ,EA+BN,CAACrB,MAAD,EAASC,WAAT,CA/BM,CAAT;AAiCA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CAtCM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsClear,setRowsCleared]=useStage(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\nconst sweepRows =newStage=>newStage.reduce\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}